package net;

import org.lwjgl.opengl.ARBShaderObjects;

public class gk {
   public int D;
   public int Qb;
   public int q;
   public int J;
   public int W;
   public int Y;
   public int Q8;
   public int p;
   public int QJ;
   public int e;
   public int b;
   public int d;
   public int t;
   public int Z;
   public int QL;
   public int I;
   public int QG;
   public int Qc;
   public int i;
   public int Qs;
   public int l;
   public int Qt;
   public int Qe;
   public int Qu;
   public int o;
   public int w;
   public int QO;
   public int U;
   public int QP;
   public int QR;
   public int H;
   public int A;
   public int QS;
   public int N;
   public int v;
   public int r;
   public int y;
   public int C;
   public int O;
   public int Q2;
   public int G;
   public int M;
   public int P;
   public int g;
   public int Q;
   public int Qi;
   public int m;
   public int Qp;
   public int Q0;
   public int f;
   public int QM;
   public int B;
   public int R;
   public int K;
   public int a;
   public int h;
   public int F;
   public int L;
   public int z;
   public int T;
   public int QF;
   public int V;
   public int c;
   public int n;
   public int S;
   public int k;
   public int j;
   public int QC;
   public int QH;
   public int x;
   public int Qr;
   public int s;
   public int E;
   public int X;
   public int u;

   public gk(int var1) {
      this.D = var1;
      this.Qb = ARBShaderObjects.glGetUniformLocationARB(var1, "texture");
      this.q = ARBShaderObjects.glGetUniformLocationARB(var1, "lightmap");
      this.J = ARBShaderObjects.glGetUniformLocationARB(var1, "normals");
      this.W = ARBShaderObjects.glGetUniformLocationARB(var1, "specular");
      this.Y = ARBShaderObjects.glGetUniformLocationARB(var1, "shadow");
      this.Q8 = ARBShaderObjects.glGetUniformLocationARB(var1, "watershadow");
      this.p = ARBShaderObjects.glGetUniformLocationARB(var1, "shadowtex0");
      this.QJ = ARBShaderObjects.glGetUniformLocationARB(var1, "shadowtex1");
      this.e = ARBShaderObjects.glGetUniformLocationARB(var1, "depthtex0");
      this.b = ARBShaderObjects.glGetUniformLocationARB(var1, "depthtex1");
      this.d = ARBShaderObjects.glGetUniformLocationARB(var1, "shadowcolor");
      this.t = ARBShaderObjects.glGetUniformLocationARB(var1, "shadowcolor0");
      this.Z = ARBShaderObjects.glGetUniformLocationARB(var1, "shadowcolor1");
      this.QL = ARBShaderObjects.glGetUniformLocationARB(var1, "noisetex");
      this.I = ARBShaderObjects.glGetUniformLocationARB(var1, "gcolor");
      this.QG = ARBShaderObjects.glGetUniformLocationARB(var1, "gdepth");
      this.Qc = ARBShaderObjects.glGetUniformLocationARB(var1, "gnormal");
      this.i = ARBShaderObjects.glGetUniformLocationARB(var1, "composite");
      this.Qs = ARBShaderObjects.glGetUniformLocationARB(var1, "gaux1");
      this.l = ARBShaderObjects.glGetUniformLocationARB(var1, "gaux2");
      this.Qt = ARBShaderObjects.glGetUniformLocationARB(var1, "gaux3");
      this.Qe = ARBShaderObjects.glGetUniformLocationARB(var1, "gaux4");
      this.Qu = ARBShaderObjects.glGetUniformLocationARB(var1, "colortex0");
      this.o = ARBShaderObjects.glGetUniformLocationARB(var1, "colortex1");
      this.w = ARBShaderObjects.glGetUniformLocationARB(var1, "colortex2");
      this.QO = ARBShaderObjects.glGetUniformLocationARB(var1, "colortex3");
      this.U = ARBShaderObjects.glGetUniformLocationARB(var1, "colortex4");
      this.QP = ARBShaderObjects.glGetUniformLocationARB(var1, "colortex5");
      this.QR = ARBShaderObjects.glGetUniformLocationARB(var1, "colortex6");
      this.H = ARBShaderObjects.glGetUniformLocationARB(var1, "colortex7");
      this.A = ARBShaderObjects.glGetUniformLocationARB(var1, "gdepthtex");
      this.QS = ARBShaderObjects.glGetUniformLocationARB(var1, "depthtex2");
      this.N = ARBShaderObjects.glGetUniformLocationARB(var1, "tex");
      this.v = ARBShaderObjects.glGetUniformLocationARB(var1, "heldItemId");
      this.r = ARBShaderObjects.glGetUniformLocationARB(var1, "heldBlockLightValue");
      this.y = ARBShaderObjects.glGetUniformLocationARB(var1, "fogMode");
      this.C = ARBShaderObjects.glGetUniformLocationARB(var1, "fogColor");
      this.O = ARBShaderObjects.glGetUniformLocationARB(var1, "skyColor");
      this.Q2 = ARBShaderObjects.glGetUniformLocationARB(var1, "worldTime");
      this.G = ARBShaderObjects.glGetUniformLocationARB(var1, "moonPhase");
      this.M = ARBShaderObjects.glGetUniformLocationARB(var1, "frameTimeCounter");
      this.P = ARBShaderObjects.glGetUniformLocationARB(var1, "sunAngle");
      this.g = ARBShaderObjects.glGetUniformLocationARB(var1, "shadowAngle");
      this.Q = ARBShaderObjects.glGetUniformLocationARB(var1, "rainStrength");
      this.Qi = ARBShaderObjects.glGetUniformLocationARB(var1, "aspectRatio");
      this.m = ARBShaderObjects.glGetUniformLocationARB(var1, "viewWidth");
      this.Qp = ARBShaderObjects.glGetUniformLocationARB(var1, "viewHeight");
      this.Q0 = ARBShaderObjects.glGetUniformLocationARB(var1, "near");
      this.f = ARBShaderObjects.glGetUniformLocationARB(var1, "far");
      this.QM = ARBShaderObjects.glGetUniformLocationARB(var1, "sunPosition");
      this.B = ARBShaderObjects.glGetUniformLocationARB(var1, "moonPosition");
      this.R = ARBShaderObjects.glGetUniformLocationARB(var1, "upPosition");
      this.K = ARBShaderObjects.glGetUniformLocationARB(var1, "previousCameraPosition");
      this.a = ARBShaderObjects.glGetUniformLocationARB(var1, "cameraPosition");
      this.h = ARBShaderObjects.glGetUniformLocationARB(var1, "gbufferModelView");
      this.F = ARBShaderObjects.glGetUniformLocationARB(var1, "gbufferModelViewInverse");
      this.L = ARBShaderObjects.glGetUniformLocationARB(var1, "gbufferPreviousProjection");
      this.z = ARBShaderObjects.glGetUniformLocationARB(var1, "gbufferProjection");
      this.T = ARBShaderObjects.glGetUniformLocationARB(var1, "gbufferProjectionInverse");
      this.QF = ARBShaderObjects.glGetUniformLocationARB(var1, "gbufferPreviousModelView");
      this.V = ARBShaderObjects.glGetUniformLocationARB(var1, "shadowProjection");
      this.c = ARBShaderObjects.glGetUniformLocationARB(var1, "shadowProjectionInverse");
      this.n = ARBShaderObjects.glGetUniformLocationARB(var1, "shadowModelView");
      this.S = ARBShaderObjects.glGetUniformLocationARB(var1, "shadowModelViewInverse");
      this.k = ARBShaderObjects.glGetUniformLocationARB(var1, "wetness");
      this.j = ARBShaderObjects.glGetUniformLocationARB(var1, "eyeAltitude");
      this.QC = ARBShaderObjects.glGetUniformLocationARB(var1, "eyeBrightness");
      this.QH = ARBShaderObjects.glGetUniformLocationARB(var1, "eyeBrightnessSmooth");
      this.x = ARBShaderObjects.glGetUniformLocationARB(var1, "terrainTextureSize");
      this.Qr = ARBShaderObjects.glGetUniformLocationARB(var1, "terrainIconSize");
      this.s = ARBShaderObjects.glGetUniformLocationARB(var1, "isEyeInWater");
      this.E = ARBShaderObjects.glGetUniformLocationARB(var1, "hideGUI");
      this.X = ARBShaderObjects.glGetUniformLocationARB(var1, "centerDepthSmooth");
      this.u = ARBShaderObjects.glGetUniformLocationARB(var1, "atlasSize");
   }
}
